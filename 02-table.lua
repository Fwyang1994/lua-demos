
--[[
Lua语言中的表本质上是一种辅助数组（associative array），这种数组不
仅可以使用数值作为索引，也可以使用字符串或其他任意类型的值作为索引
（nil除外）。
]]

-- 创建表
a = {}
x = "x"
a[x] = 10
a[20] = "hello"
print( a[x], a[10], a[20], a["x"] )

-- 表永远是匿名的，表本身和保存表的变量之间没有固定的关系：
b = a
print( b[x], b[10], b[20], b["x"] )
-- 表是独立存在的，任何变量都只能保存表的引用，而不是表本身
b[x] = 30
print( a[x], b[x] )

-- 对于一个表而言，当程序中不再有指向它的引用时，垃圾收集器会最终删除这个表并重用其占用的内存。
-- 把 a b 都重新赋值为 nil， 程序中不再有指向它的引用， GC就会自动回收
--a = nil
--b = nil

-- 把表中的元素赋值给一个变量时，是值传递，并不是 表中元素的引用
c = b[20]
print( b[20], c )
b[20] = "haha"
print( b[20], c )

-- 如同全局变量一样，未经初始化的表元素为nil，将nil赋值给表元素可以将其删除。

-- 可以把表当做结构体进行调用和赋值，增加代码的可读性
a.hello = "hello world"
print( a["hello"], a.x )

-- 当索引是数字时， 可以使用显示类型转换，以明确索引的类型
-- 因为 b["20"] , b[20] 在作为索引时， 是不同的两个值
print( b["20"] , b[20] )

-- 构造器第一个元素的索引是1而不是0
str = {"a", "b"}
print( str[0], str[1], str[2] )  -- nil	a	b
-- Lua语言还提供了一种初始化记录式（record-like）表的特殊语法：
a1 = { x=10, y=20}
print( a1.x, a1.y ) -- 10	20
-- 可以使用另一种更加通用的构造器，即通过方括号括起来的表达式显式地指定每一个索引：
a2 = { [0]="a", [1]="b", [2]="c" }
-- 无论使用哪种方式创建表，都可以随时增加或删除表元素：




